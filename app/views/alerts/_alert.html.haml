.title
  = alert.name
  %span.id= alert.id
%div
  .rightbar
    .header{:style => "margin-top: 0px"} Details
    %table.table.table-striped.table-hover.table-sm
      %tbody
        %tr
          %td.key Department
          %td.detail= editable(alert, :departments, :name)
        %tr
          %td.key Assigned
          %td.detail= editable(alert, :users, :name)
        %tr
          %td.key Ticket
          %td.detail= editable(alert, :ticket)

    .header Detections
    %table.table.table-striped.table-hover.table-sm
      %tbody
        %tr
          %td.key Count
          %td.detail= alert.count
        %tr
          %td.key First
          %td.detail= alert.first_detected_at
        - if alert.first_detected_at != alert.last_detected_at
          %tr
            %td.key Last
            %td.detail= alert.last_detected_at

    .header Dates
    %table.table.table-striped.table-hover.table-sm
      %tbody
        - if alert.assigned_at
          %tr
            %td.key Assigned
            %td.detail= alert.assigned_at
        - if alert.verified_at
          %tr
            %td.key Verified
            %td.detail= alert.verified_at
        - if alert.rejected_at
          %tr
            %td.key Rejected
            %td.detail= alert.rejected_at
        - if alert.resolved_at
          %tr
            %td.key Resolved
            %td.detail= alert.resolved_at
        %tr
          %td.key Created
          %td.detail= alert.created_at
        %tr
          %td.key Updated
          %td.detail= alert.updated_at

    - if alert.assigned_at or not alert.unverified?
      .header Time Frames
      %table.table.table-striped.table-hover.table-sm
        %tbody
          - if alert.assigned_at
            %tr
              %td.key Detected → Assigned
              %td.detail= distance_of_time_in_words(alert.first_detected_at, alert.assigned_at)
          - if alert.verified_at
            %tr
              %td.key Detected → Verified
              %td.detail= distance_of_time_in_words(alert.first_detected_at, alert.verified_at)
          - if alert.rejected_at
            %tr
              %td.key Detected → Rejected
              %td.detail= distance_of_time_in_words(alert.first_detected_at, alert.rejected_at)
          - if alert.resolved_at
            %tr
              %td.key Detected → Resolved
              %td.detail= distance_of_time_in_words(alert.first_detected_at, alert.resolved_at)
            - if alert.verified_at
              %tr
                %td.key Verified → Resolved
                %td.detail= distance_of_time_in_words(alert.verified_at, alert.resolved_at)

    - if alert.key_values.any?
      .header Key Value
      %table.table.table-striped.table-hover.table-sm
        %tbody
          - alert.key_values.each do |kv|
            %tr
              %td.key= kv.key
              %td.detail= kv.value

  .row.basic
    .col
      .key Type
      = editable(alert, :kind, :name)
    .col
      .key Family
      = editable(alert, :family, :name)
    .col
      .key Source
      %i{class: alert.source.icon}
      = alert.source.name
  .row.basic
    .col
      .key External Severity
      %span.badge{style: "background: #{alert.severity_external.color}"}= alert.severity_external.name
    .col
      .key Internal Severity
      = editable(alert, :severity_internal, :name, style: "background: #{alert.severity_internal.color}")
  .row.basic
    .col
      .key Finding ID
      %pre
        %code= alert.finding_id
    - if alert.target
      .col
        .key Target
        %pre
          %code= alert.target
    - if alert.detail
      .col
        .key Detail
        %pre
          %code= alert.detail

  %hr/

  .row.basic
    .col
      - if alert.unverified?
        %a.badge{class: "state state-unverified-bg flash"}
          %i.fa-fw.fas.fa-question
          Unverified
      - elsif alert.may_unverify?
        = link_to unverify_alert_path(alert), remote: true, data: { type: :json }, method: :post, class: 'badge state state-unverified-bg' do
          %i.fa-fw.fas.fa-question
          Unverified
      - else
        %span.badge{class: "state state-unverified-bg"}
          %i.fa-fw.fas.fa-question
          Unverified

    .col-1
      %i.fas.fa-exchange-alt

    .col
      - if alert.verified?
        %a.badge{class: "state state-verified-bg flash"}
          %i.fa-fw.far.fa-eye
          Verified
      - elsif alert.may_verify?
        = link_to verify_alert_path(alert), remote: true, data: { type: :json }, method: :post, class: 'badge state state-verified-bg' do
          %i.fa-fw.far.fa-eye
          Verified
      - else
        %span.badge{class: "state state-verified-bg"}
          %i.fa-fw.far.fa-eye
          Verified

    .col-1
      %i.fas.fa-long-arrow-alt-right
    .col
      - if alert.rejected?
        %a.badge{class: "state state-rejected-bg flash"}
          %i.fa-fw.fas.fa-skull
          Rejected
      - elsif alert.may_reject?
        = link_to reject_alert_path(alert), remote: true, data: { type: :json }, method: :post, class: 'badge state state-rejected-bg' do
          %i.fa-fw.fas.fa-skull
          Rejected
      - else
        %span.badge{class: "state state-rejected-bg"}
          %i.fa-fw.fas.fa-skull
          Rejected

      - if alert.resolved?
        %a.badge{class: "state state-resolved-bg flash"}
          %i.fa-fw.fas.fa-flag-checkered
          Resolved
      - elsif alert.may_resolve?
        = link_to resolve_alert_path(alert), remote: true, data: { type: :json }, method: :post, class: 'badge state state-resolved-bg' do
          %i.fa-fw.fas.fa-flag-checkered
          Resolved
      - else
        %span.badge{class: "state state-resolved-bg"}
          %i.fa-fw.fas.fa-flag-checkered
          Resolved

  - if alert.urls.any?
    %hr/
    %h5 URLs
    %ul
      - alert.urls.each do |url|
        %li
          = url.name
          %small (#{link_to url.url, url.url, target: '_blank'})

  - if alert.notes?
    %hr/
    %h5 Notes
    %p= alert.notes

  %hr/
  %h5 Raw Finding
  %pre
    %code.raw= JSON.pretty_generate(JSON.parse(alert.finding))

  %hr/
  %h5 Timeline
  - alert.audits.order('created_at desc').each do |audit|
    .row.timeline
      .col-1.pip
        %i{class: audit.icon || 'fas fa-dot-circle'}
      .col.date= audit.created_at
      .col.action= audit.kind
      .col.detail= audit.action
      -# .col.author= audit.author
